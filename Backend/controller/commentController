const Joi = require('joi');
const CommentDTO = require('../dto/CommentDTO');



const mongodbIdPattern = /^[0-9a-fA-F]{24}$/;
const Comment = require('../models/comment');




const commentController= {
async create(req,res,next){


    const createCommentSchema = Joi.object({
      
        author: Joi.string().regex(mongodbIdPattern).required(),
        content: Joi.string().required(),
        blog: Joi.string().regex(mongodbIdPattern).required()
        
      });

const {error}=createCommentSchema.validate(req.body);
if(error){

    return next(error);
}
const {content,author,blog}=req.body;


try {
    
const newComment= new Comment({

    content,author,blog
});
await newComment.save();


} catch (error) {
    return next (error);
}

return res.status(201).json({message:'Comment Created'})

},
//end

async getById(req, res, next) {
    const getByIdSchema = Joi.object({
      id: Joi.string().regex(mongodbIdPattern).required(),
    });
  
    const { error } = getByIdSchema.validate(req.params);
    if (error) {
      return next(error);
    }
  
    const { id } = req.params;
    let comments;
  
    try {
      // Find the comments and populate the 'author' field with the corresponding user details
      comments = await Comment.find({ blog: id }).populate('author');
    } catch (error) {
      return next(error);
    }
  
    // Convert the comments to DTOs
    const commentsDTO = comments.map((comment) => new CommentDTO(comment));
  
    return res.status(200).json({ data: commentsDTO });
  },



}
  
  module.exports = commentController;
  